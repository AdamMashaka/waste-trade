<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat App</title>
    <link rel="stylesheet" type="text/css" href="/css/styles.css">
</head>
<body>
    <!-- Create the messaging interface -->
    <!-- Add input fields, message display area, and JavaScript for messaging -->

    <div class="chat-container">
        <div class="chat-messages" id="chat-container"></div>
        <div class="chat-form-container">
            <form id="chat-form">
                <input
                    id="text"
                    type="text"
                    class="input-box"
                    placeholder="Enter Message"
                    required
                    autocomplete="off"
                />
                <button class="btn"><i class="fas fa-paper-plane"></i> Send</button>
            </form>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();

        // Use the 'recipient' variable from the template to identify the recipient
        const recipient = '<%= recipient %>';
        const sender = '<%= sender %>';

        //function to scroll to bottom
        function scrollToBottom() {
            const chatContainer = document.getElementById('chat-container');
            chatContainer.scrollTop = chatContainer.scrollHeight;
        }


        // Function to display a message on the UI
        function displayMessage(message, messageType) {
            const messageContainer = document.createElement('div');
            messageContainer.className = `message ${messageType}`;

            const messageText = document.createElement('div');
            messageText.className = 'message-text';
            messageText.textContent = message.text;
            console.log(message);

            messageContainer.appendChild(messageText);

            document.querySelector('.chat-messages').appendChild(messageContainer);
            scrollToBottom();
        }

        //function to display new messages
        function displayNewMessage(message, messageType) {
            const messageContainer = document.createElement('div');
            messageContainer.className = `message ${messageType}`;

            const newMessage = document.createElement('div');
            newMessage.className = 'message-text';
            newMessage.textContent = message;

            messageContainer.appendChild(newMessage);

            document.querySelector('.chat-messages').appendChild(messageContainer);
            scrollToBottom();
        }

        // Event handler for receiving messages
        socket.on('message', (message) => {
            // Determine the message type based on sender
            const messageType = message.sender === sender ? 'outgoing' : 'incoming';
            displayNewMessage(message, messageType);
        });

        // Function to load and display messages
        function loadAndDisplayMessages() {
            // Emit a request to the server to load messages
            socket.emit('loadMessages');

            // Event handler to receive loaded messages from the server
            socket.on('loadMessages', (messages) => {
                messages.forEach((message) => {
                    // Determine the message type based on sender
                    const messageType = message.sender === sender ? 'outgoing' : 'incoming';
                    displayMessage(message, messageType);
                });
            });
        }

        // Event handler for sending messages
        document.querySelector('#chat-form').addEventListener('submit', (event) => {
            event.preventDefault();
            const text = document.querySelector('#text').value;
            
            // Display the outgoing message on the UI
            displayMessage({ text, sender }, 'outgoing');
            
            // Emit the message to the server as a private message to the recipient
            socket.emit('private-message', { sender: sender, recipient, message: text });
            
            // Clear the input field after sending the message
            document.querySelector('#text').value = '';
        });


        // Trigger the loading of messages when the page loads
        document.addEventListener('DOMContentLoaded', () => {
            loadAndDisplayMessages();
        });
    </script>
</body>
</html>
